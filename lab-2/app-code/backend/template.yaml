AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Bookmarks - A simple Serverless App using AWS SAM
Resources:
  api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - Bookmark App
        - ResourceName: /bookmarks
      StageName: !Ref APIGatewayStageName
      Cors:
        AllowMethods: "'POST, GET, DELETE, PUT, PATCH, ANY'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /bookmarks:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${listBookmarks.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createBookmark.Arn}/invocations
              responses: {}
          /bookmarks/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getBookmark.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${updateBookmark.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteBookmark.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
    Metadata:
      FinTag: /bookmarks

  getBookmark:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getBookmark
      Description: !Sub
        - ${ResourceName} Function
        - ResourceName: getBookmark
      CodeUri: src/getBookmark
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !Ref LambdaDeploymentRole
      Environment:
        Variables:
          TABLE_NAME: !Ref bookmarksTable
          TABLE_ARN: !GetAtt bookmarksTable.Arn
      Events:
        apiGET:
          Type: Api
          Properties:
            Path: /bookmarks/{id}
            Method: GET
            RestApiId: !Ref api
    Metadata:
      FinTag: getBookmark

  updateBookmark:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateBookmark
      Description: !Sub
        - ${ResourceName} Function
        - ResourceName: updateBookmark
      CodeUri: src/updateBookmark
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !Ref LambdaDeploymentRole
      Environment:
        Variables:
          TABLE_NAME: !Ref bookmarksTable
          TABLE_ARN: !GetAtt bookmarksTable.Arn
      Events:
        apiPUT:
          Type: Api
          Properties:
            Path: /bookmarks/{id}
            Method: PUT
            RestApiId: !Ref api
    Metadata:
      FinTag: updateBookmark

  createBookmark:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createBookmark
      Description: !Sub
        - ${ResourceName} Function
        - ResourceName: createBookmark
      CodeUri: src/createBookmark
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !Ref LambdaDeploymentRole
      Environment:
        Variables:
          TABLE_NAME: !Ref bookmarksTable
          TABLE_ARN: !GetAtt bookmarksTable.Arn
      Events:
        apiPOST:
          Type: Api
          Properties:
            Path: /bookmarks
            Method: POST
            RestApiId: !Ref api
    Metadata:
      FinTag: createBookmark

  deleteBookmark:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteBookmark
      Description: !Sub
        - ${ResourceName} Function
        - ResourceName: deleteBookmark
      CodeUri: src/deleteBookmark
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !Ref LambdaDeploymentRole
      Environment:
        Variables:
          TABLE_NAME: !Ref bookmarksTable
          TABLE_ARN: !GetAtt bookmarksTable.Arn
      Events:
        apiDELETE:
          Type: Api
          Properties:
            Path: /bookmarks/{id}
            Method: DELETE
            RestApiId: !Ref api
    Metadata:
      FinTag: deleteBookmark

  listBookmarks:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: listBookmarks
      Description: !Sub
        - ${ResourceName} Function
        - ResourceName: listBookmarks
      CodeUri: src/listBookmarks
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !Ref LambdaDeploymentRole
      Environment:
        Variables:
          TABLE_NAME: !Ref bookmarksTable
          TABLE_ARN: !GetAtt bookmarksTable.Arn
      Events:
        apiGETAll:
          Type: Api
          Properties:
            Path: /bookmarks
            Method: GET
            RestApiId: !Ref api
    Metadata:
      FinTag: listBookmarks

  contest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: contest
      Description: !Sub
        - ${ResourceName} Function
        - ResourceName: contest
      CodeUri: src/contest
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 15
      Role: !Ref LambdaDeploymentRole
      Environment:
        Variables:
          TABLE_NAME: !Ref bookmarksTable
          TABLE_ARN: !GetAtt bookmarksTable.Arn
    Metadata:
      FinTag: contest

  bookmarksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: bookmarksTable
    Metadata:
      FinTag: Bookmarks

Parameters:
  APIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names
  LambdaDeploymentRole:
    Type: String
    Description: Role arn used for Lambda Functions in this SAM template
